/*
功能：邮件发送库，可以用来发送带有附件和html格式的邮件
源码来源：自创
依赖：libcurl 7.64.0
*/
/*下面的源代码是一个典型使用curl 发送邮件代码段*/
/***************************************************************************
 *                                  _   _ ____  _
 *  Project                     ___| | | |  _ \| |
 *                             / __| | | | |_) | |
 *                            | (__| |_| |  _ <| |___
 *                             \___|\___/|_| \_\_____|
 *
 * Copyright (C) 1998 - 2016, Daniel Stenberg, <daniel@haxx.se>, et al.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution. The terms
 * are also available at https://curl.haxx.se/docs/copyright.html.
 *
 * You may opt to use, copy, modify, merge, publish, distribute and/or sell
 * copies of the Software, and permit persons to whom the Software is
 * furnished to do so, under the terms of the COPYING file.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************/

/* <DESC>
 * SMTP example using SSL
 * </DESC>
 */

#include <stdio.h>
#include <string.h>
#include <curl.h>
#include <string>
#include <fstream>
#include <iostream>
using namespace std;

/* This is a simple example showing how to send mail using libcurl's SMTP
 * capabilities. It builds on the smtp-mail.c example to add authentication
 * and, more importantly, transport security to protect the authentication
 * details from being snooped.
 *
 * Note that this example requires libcurl 7.20.0 or above.
 */

#define FROM    "715236311@qq.com"
#define TO      "kooba5@126.com"
#define CC      "784537082@qq.com"


struct fileContent
{
    char* data;
    size_t fileSize;
};

int excuteTime;
static size_t payload_source(void *ptr, size_t size, size_t nmemb, void * userp)
{
    fileContent* data=(fileContent*)userp;
    if((size == 0) || (nmemb == 0) || ((size*nmemb) < 1))
    {
        return 0;
    }

    if(data->fileSize>0 && excuteTime==0)
    {
        memcpy(ptr,data->data,data->fileSize);
        excuteTime+=1;
        return data->fileSize;
    }
    else
        return 0;
}

int main(void)
{
    CURL *curl;
    CURLcode res = CURLE_OK;
    struct curl_slist *recipients = NULL;
    excuteTime=0;

    //读取一个文件内容，作为整个邮件的内容，在于本文件同目录下存在这个文件
    const char * filename = "email.txt";
    fileContent emailFileContent;
    ifstream file(filename);
    if(file.is_open()==false)
    {
        std::cout<<"failed to open the file"<<std::endl;
        return -1;
    }
    //获得文件大小
    file.seekg(0, std::ios_base::end);
    emailFileContent.fileSize=file.tellg();
    //将读取位置设置在文件头部
    file.seekg(0, ios::beg);
    emailFileContent.data = new char [emailFileContent.fileSize+1];
    memset(emailFileContent.data,0,emailFileContent.fileSize+1);
    file.read(emailFileContent.data,emailFileContent.fileSize);
    file.close();


    curl = curl_easy_init();
    if(curl)
    {
        /* Set username and password */
        curl_easy_setopt(curl, CURLOPT_USERNAME, "715236311@qq.com");
        //QQ邮箱的授权码为登录密码：mbuttlectpgrbddj
        //126邮箱的授权码为登录密码：UTGE89UYT3JKhER
        curl_easy_setopt(curl, CURLOPT_PASSWORD, "mbuttlectpgrbddj");
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0); // allows emails to be sent

        /* This is the URL for your mailserver. Note the use of smtps:// rather
         * than smtp:// to request a SSL based connection. */
        curl_easy_setopt(curl, CURLOPT_URL, "smtps://smtp.qq.com:465");
        //curl_easy_setopt(curl, CURLOPT_URL, "smtps://smtp.126.com:465");

        /* If you want to connect to a site who isn't using a certificate that is
         * signed by one of the certs in the CA bundle you have, you can skip the
         * verification of the server's certificate. This makes the connection
         * A LOT LESS SECURE.
         *
         * If you have a CA cert for the server stored someplace else than in the
         * default bundle, then the CURLOPT_CAPATH option might come handy for
         * you. */
#ifdef SKIP_PEER_VERIFICATION
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
#endif

        /* If the site you're connecting to uses a different host name that what
         * they have mentioned in their server certificate's commonName (or
         * subjectAltName) fields, libcurl will refuse to connect. You can skip
         * this check, but this will make the connection less secure. */
#ifdef SKIP_HOSTNAME_VERIFICATION
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
#endif

        /* Note that this option isn't strictly required, omitting it will result
         * in libcurl sending the MAIL FROM command with empty sender data. All
         * autoresponses should have an empty reverse-path, and should be directed
         * to the address in the reverse-path which triggered them. Otherwise,
         * they could cause an endless loop. See RFC 5321 Section 4.5.5 for more
         * details.
         */
        curl_easy_setopt(curl, CURLOPT_MAIL_FROM, FROM);

        /* Add two recipients, in this particular case they correspond to the
         * To: and Cc: addressees in the header, but they could be any kind of
         * recipient. */
        recipients = curl_slist_append(recipients, TO);
        recipients = curl_slist_append(recipients, CC);

        curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients);

        /* We're using a callback function to specify the payload (the headers and
         * body of the message). You could just use the CURLOPT_READDATA option to
         * specify a FILE pointer to read from. */
        curl_easy_setopt(curl, CURLOPT_READFUNCTION, payload_source);
        curl_easy_setopt(curl, CURLOPT_READDATA, &emailFileContent);
        curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);

        /* Since the traffic will be encrypted, it is very useful to turn on debug
         * information within libcurl to see what is happening during the
         * transfer */
        curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);

        /* Send the message */
        res = curl_easy_perform(curl);

        /* Check for errors */
        if(res != CURLE_OK)
            fprintf(stderr, "curl_easy_perform() failed: %s\n",
                    curl_easy_strerror(res));

        /* Free the list of recipients */
        curl_slist_free_all(recipients);

        /* Always cleanup */
        curl_easy_cleanup(curl);
    }

    return (int)res;
}
